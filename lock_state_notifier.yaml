blueprint:
  name: Lock State Indicator Using RGB Bulb
  description: Indicate Lock State Using RGB Bulb
  source_url: https://github.com/jvmahon/HomeAssistant-Tools/blob/main/lock_state_notifier.yaml
  domain: automation
  input:
    controlling_lock:
      name: Lock
      selector:
        entity:
          filter:
          - domain:
            - lock
          multiple: false
    target_light:
      name: RGB Light for Notification 
      selector:
        entity:
          filter:
          - domain:
            - light
          multiple: true
    unlocked_color:
      name: Color to indicate unlocked
      selector: 
        color_rgb:
      default: [255, 0, 192]
    locked_color:
      name: Color to indicate locked
      selector: 
        color_rgb:
      default: [0, 255, 0]  
    restore_led_values:
      name: Store and Restore Prior LED State
      selector:
        boolean:
      default: "on"
trigger:
  - trigger: state
    entity_id: !input controlling_lock
    to: unlocked
condition: []
action:
  - if:
    - condition: template
      value_template: !input restore_led_values
    then:
    - action: scene.create
      metadata: {}
      data:
        scene_id: "{{this.context.id | lower }}"
        snapshot_entities: !input target_light  
      alias: Scene 'create' - capture original state of LEDs
  - action: light.turn_on
    metadata: {}
    data:
      brightness_pct: 50
      rgb_color: !input unlocked_color
    target:
      entity_id: !input target_light  
  - wait_for_trigger:
      - trigger: state
        entity_id: !input controlling_lock
        to: locked
    alias: Wait for lock to be locked again
  - action: light.turn_on
    metadata: {}
    data:
      rgb_color: !input locked_color
      brightness_pct: 50
    target:
      entity_id: !input target_light 
  - alias: Wait 3 seconds, but end sooner if lock changes to unlocked again
    wait_for_trigger:
      - trigger: state
        entity_id: !input controlling_lock
        to: unlocked
    timeout:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - if:
    - condition: template
      value_template: !input restore_led_values
    then:
    - action: scene.turn_on
      metadata: {}
      target:
        entity_id: "{{ 'scene.' ~ this.context.id | lower}}"
      alias: Activate Scene - Restore original state of LEDs
    - action: scene.delete
      metadata: {}
      data: {}
      target:
        entity_id: "{{ 'scene.' ~ this.context.id | lower }}"
    else:
    - action: light.turn_off
      target:
        entity_id: !input target_light 
mode: queued
max: 10
max_exceeded: silent
